-01-cmp- (compare)

$ cat 1.txt
five
four
one
three
two
$ cat 2.txt
four 
one
six
three
two

$ cmp -c 1.txt 2.txt
1.txt 2.txt differ: byte 7, line 2 is 151 i 157 o

--------

-02-comm- (common)

$ comm 1.txt 2.txt
		zero
five
		four
		one
	six
		three
		two

---------

-03-wc- (word count)

$ cat table.txt 
one
two three
four
six seven eight nine
ten
$ wc -c table.txt
44 table.txt		# bytes
$ wc -m table.txt 
44 table.txt		# chars
$ wc -l table.txt 
5 table.txt		# lines
$ wc -L table.txt 
20 table.txt		# max width
$ 
$ wc -w table.txt 
9 table.txt		# words

-------

-04-05-diff+patch-

$ echo -e "apple\nbear\ndear" > small_file.txt
$ echo -e "apple\nbear\ncat\ndear" > big_file.txt
$ diff small_file.txt big_file.txt > patch.file
$ cat patch.file 2a3
  > cat
$ patch -b small_file.txt patch.file
  patching file small_file.txt
$ ls
  big_file.txt patch.file small_file.txt small_file.txt.orig
$ cat small_file.txt
  apple
  bear
  cat
  dear

------------------

-06-grep- (Global Regular Expression Print)

$ grep -n true /boot/grub/grub.cfg
10:  set have_grubenv=true
17:   set boot_once=true
35:  set boot_once=true
120:  true

---------

-07-join- # expanded

join is a command in Unix-like operating systems that merges the lines of two sorted text files based on the presence of a common field.

Consider 2 sample files balance.txt and holders.txt. 
balance.txt containing bank account numbers and the balance in the account.
holders.txt containing bank account numbers and the account names.

$ cat balance.txt		$ cat holders.txt

  251308 30000		  	  James  - 251308
  251311 25000		  	  Joseph - 251311
  251315 10000		  	  John   - 251315
  251321 12255		  	  Julian - 251321

-t ' ' : use space as delimiter
-1 2   : use the second column(2) as the key for join in the first file(-1)
-2 1   : use the first column(1) as the key for join in the second file(-2)

$ join -t ' ' -1 2 -2 1 holders.txt balance.txt
  251308 James 30000
  251311 Joseph 25000
  251315 John 10000
  251321 Julian 12255

$ echo -e "Peter\nKate\nPaul\nMarie" | sort -o  people_who_love_cheese.txt
$ echo -e "Joda\nPaul\nKylo\nMarie\nSam" | sort -o people_who_love_ham.txt
$ join people_who_love_*
  Marie
  Paul

---------

-08-sort-

$ echo -e "YouTube\t- 100 $\nSc-ship\t- 1 $ (per year)\nWork\t- 500 $\nF-lance\t- 200 $" > income.txt
$ cat income.txt
  YouTube - 100$
  Sc-ship - 1$ (per year)
  Work	  - 500$
  F-lance - 200$
$ sort -nrk 3 income.txt 
  Work	  - 500$
  F-lance - 200$
  YouTube - 100$
  Sc-ship - 1$ (per year)

---------

-09-10-head+tail-

$ cat list.txt 
one
two
three
four
five
six
seven
eight
nine
ten
eleven
twelve
thirteen
fourteen
fifteen
sixteen
seventeen
eighteen
nineteen
twenty

$ head list.txt 
one
two
three
four
five
six
seven
eight
nine
ten

$ head -n 3 list.txt 
one
two
three

$ tail list.txt 
eleven
twelve
thirteen
fourteen
fifteen
sixteen
seventeen
eighteen
nineteen
twenty

-----------------

-11-tee-

$ ls | tee dirlist.txt
1.txt
2.txt
cmp
list.txt
list.txt.part00
list.txt.part01

--------

-12-tr-

$ echo "caesar" > rot13.txt
$ tr 'a-z' 'n-za-m' < rot13.txt
pnrfne

-------

-13-uniq-

$ cat names.txt
Alice
John
Stuart
Alice
Mike
John
$ sort names.txt | uniq		# including every one repeatable word
Alice
John
Mike
Stuart
$ sort names.txt | uniq -u	# only unique
Mike
Stuart
$ sort names.txt | uniq -d	# only repeatable
Alice
John
$ sort names.txt | uniq -c	# word count
      2 Alice
      2 John
      1 Mike
      1 Stuart

---------

-14-cut- # expanded

How to use lists (element = {byte, character, field}):
2     - returns only 2 element
2-5   - returns all elements from index 2 to 5
-3    - returns all elements before 4 index
5     - returns all elements from 5 index
1,3,6 - returns only 1, 3 and 6 elements
1,3-  - returns 1 elements and all from 3 index


-b, --bytes=LIST
Select from file only specified bytes in list.

-c, --characters=LIST
select from file only specified characters in list.

-f, --fields=LIST; -d, --delimiter=DELIMITER
select from file only specified fields in list. Delimiter by default is \t. May be redefined by -d \t.

$ cut -d : -f 1 /etc/passwd
  root
  daemon
  bin
  sys
  sync
  ...

---------

-15-tar-

$ tar -cvf list.tar list.txt
list.txt

--------

-16-gzip-

$ gzip -1c list.tar > list.tar.gz	# -1 is fast compression (and -9 is best)
$ ls
list.tar  list.tar.gz  list.txt
$ rm list.txt
$ gzip -dc list.tar.gz | tar -xf -
$ ls
list.tar list.tar.gz  list.txt

---------

-17-bzip2-

$ bzip2 list.txt
$ bzip2 -d list.txt.bz2

----------

-18-awk- (Aho, Weinberger, Kernighan)

# `awk` takes second column of `dpkg -l` output 

$ dpkg -l | awk '{print $2}' > installed_tools.txt

--------

-19-sed- (Stream EDitor)

$ echo "Hello, Word!" > hello.txt
$ cat hello.txt | sed 's/Word/World/g' > hello_corrected.txt
$ cat hello_corrected.txt 
Hello, World!
$ sed -n 4,6p list.txt
four
five
six

--------

-20-iconv-

$ echo привет > file.txt
$ iconv -f utf8 -t cp866 file.txt -o garbage.txt
$ cat garbage.txt
�ਢ��
$ iconv -f cp866 -t utf8 garbage.txt -o newfile.txt
$ cat newfile.txt 
привет

----------

-21-md5+sha256-

$ md5sum list.txt
e4e3d0f89a8e91029de19903007434ce  list.txt
$ sha256sum list.txt 
fdf142da31649001eb72f10a96fd9db7b0da83c4c5cf2892026313e2ade2475f  list.txt

---------------

-22-23-du+df-

$ du -d 1		# depth = 1
32	./new
116	./protocol
164	.
$ du -sh		# summarize & human-readable
164K	.

$ df -h .
Filesystem      Size  Used Avail Use% Mounted on
/dev/sda5       121G   77G   38G  68% /

-------------

-24-file-

$ file *
book2009pp1-427.pdf: PDF document, version 1.2
exam2013_1.djvu:     DjVu multiple page document
inf.odt:             OpenDocument Text
Manager.jar:         Java archive data (JAR)
play.txt:            ASCII text
xtd.odg:             OpenDocument Drawing

---------

-25-touch-

$ echo abc > abc.txt
$ touch -ct 201509011200 abc.txt
$ ls -l
-rw-rw-r-- 1 hagread-only hagread-only     4 Sep  1  2015 abc.txt

----------

-26-find-

$ tree findtest
  findtest
  ├── a.out
  ├── newproj
  │   ├── a.out
  │   └── p.c
  ├── prog10.c
  └── prog.c
$ find ./findtest -name a.out -atime 7 -exec rm {} \;
$ tree findtest
  findtest
  ├── newproj
  │   └── p.c
  ├── prog10.c
  └── prog.c

---------

-27-xargs- # expanded

$ tree xargtest
  xargstest
  ├── dir1
  │   ├── file1A
  │   └── file1B
  ├── dir2
  │   ├── file2A
  │   └── file2B
  └── dir3
      ├── file3A
      └── file3B

# Instead of this:
$ for file in $(find xargstest -name 'file??' | sort)
  > do 
  > 	 echo $file
  >	 for line in (cat "./$file")
  >	   do
  >		echo "  $line"
  >	   done
  > done

# I can use this:
$ find xargstest -name 'file??' | sort | xargs -i sh -c 'file={}; echo $file; cat "./$file" | xargs -I{} echo "  {}"'
  xargstest/dir1/file1A
    one
  xargstest/dir1/file1B
    one
    two
  xargstest/dir2/file2A
    one
    two
    three
  xargstest/dir2/file2B
    one
    two
    three
    four
  xargstest/dir3/file3A
    one
    two
    three
    four
    five
  xargstest/dir3/file3B
    one
    two
    three
    four
    five
    six
$ find xargstest -name 'file??' | sort | xargs wc -l
  1 xargstest/dir1/file1A
  2 xargstest/dir1/file1B
  3 xargstest/dir2/file2A
  4 xargstest/dir2/file2B
  5 xargstest/dir3/file3A
  6 xargstest/dir3/file3B
 21 total

----------

-28-paste-

$ cat 1.txt
one
two
three
$ cat 2.txt
four
five
six
$ paste -d '.' 1.txt 2.txt
one.four
two.five
three.six
$ paste -s 1.txt 2.txt
one	two	three
four	five	six

----------

-29-split-

$ split -db 66 list.txt list.txt.part
$ ls -l
total 12
-rw-rw-r-- 1 hagread-only hagread-only 132 Mar 28 21:32 list.txt
-rw-rw-r-- 1 hagread-only hagread-only  66 Mar 28 21:34 list.txt.part00
-rw-rw-r-- 1 hagread-only hagread-only  66 Mar 28 21:34 list.txt.part01

----------

-30-mktemp-

hagread-only@ubuntuPC:~/Desktop$ mktemp -d	# temp dir creation
/tmp/tmp.hJhwkSQCF7/

-----------
